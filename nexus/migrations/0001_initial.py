# Generated by Django 5.0.7 on 2024-11-11 12:13

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('champion', '0026_videocategory_alter_video_price_video_videocategory'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField()),
                ('icon', models.ImageField(upload_to='badges/')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TweetTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField()),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad_text', models.CharField(max_length=280)),
                ('media_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('clicks', models.PositiveIntegerField(default=0)),
                ('impressions', models.PositiveIntegerField(default=0)),
                ('advertiser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tweet_views', models.PositiveIntegerField(default=0)),
                ('tweet_likes', models.PositiveIntegerField(default=0)),
                ('tweet_retweets', models.PositiveIntegerField(default=0)),
                ('profile_views', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked', to='champion.registration')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocker', to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('follows_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='champion.registration')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='Mute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('muted_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='muted', to='champion.registration')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='muter', to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('trial_period_days', models.PositiveIntegerField(default=0)),
                ('features', models.ManyToManyField(to='nexus.subscriptionfeature')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='Tweet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=280)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_url', models.URLField(blank=True, null=True)),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('retweets_count', models.PositiveIntegerField(default=0)),
                ('reply_count', models.PositiveIntegerField(default=0)),
                ('trending_score', models.FloatField(default=0)),
                ('is_flagged', models.BooleanField(default=False)),
                ('moderation_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Removed', 'Removed')], default='Pending', max_length=20)),
                ('flagged_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('is_trending', models.BooleanField(default=False)),
                ('engagement_score', models.FloatField(default=0)),
                ('parent_tweet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='nexus.tweet')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('topics', models.ManyToManyField(blank=True, to='nexus.tweettopic')),
            ],
        ),
        migrations.CreateModel(
            name='TrendingScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trending_score', models.FloatField(default=0)),
                ('last_calculated', models.DateTimeField(default=django.utils.timezone.now)),
                ('tweet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('original_tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thread_root', to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='SavedTweet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='Retweet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Reviewed', 'Reviewed'), ('Resolved', 'Resolved')], default='Pending', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='PinnedTweet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pinned_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='ContentView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
                ('tweet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nexus.tweet')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engagement_score', models.FloatField(default=0)),
                ('is_suspended', models.BooleanField(default=False)),
                ('strike_count', models.PositiveIntegerField(default=0)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
                ('badges', models.ManyToManyField(blank=True, to='nexus.badge')),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('privacy_public', models.BooleanField(default=True)),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('two_fa_method', models.CharField(choices=[('SMS', 'SMS'), ('Email', 'Email')], max_length=10)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='champion.registration')),
            ],
        ),
        migrations.AddIndex(
            model_name='tweet',
            index=models.Index(fields=['created_at'], name='nexus_tweet_created_23d1ba_idx'),
        ),
        migrations.AddIndex(
            model_name='tweet',
            index=models.Index(fields=['parent_tweet'], name='nexus_tweet_parent__6148f0_idx'),
        ),
        migrations.AddIndex(
            model_name='tweet',
            index=models.Index(fields=['likes_count'], name='nexus_tweet_likes_c_8a9604_idx'),
        ),
    ]
